'use client';\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Search, Filter, X, ChevronDown, ChevronUp } from 'lucide-react';\nimport { debounce } from 'lodash';\n\ninterface FilterOption {\n  id: string;\n  label: string;\n  count?: number;\n}\n\ninterface FilterGroup {\n  id: string;\n  label: string;\n  type: 'checkbox' | 'radio' | 'range' | 'select';\n  options?: FilterOption[];\n  min?: number;\n  max?: number;\n  step?: number;\n}\n\ninterface ProductFiltersProps {\n  onSearch: (query: string) => void;\n  onFilter: (filters: Record<string, any>) => void;\n  filterGroups: FilterGroup[];\n  className?: string;\n}\n\nconst ProductFilters: React.FC<ProductFiltersProps> = ({\n  onSearch,\n  onFilter,\n  filterGroups,\n  className = '',\n}) => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [filters, setFilters] = useState<Record<string, any>>({});\n  const [expandedGroups, setExpandedGroups] = useState<Set<string>>(new Set());\n  const [isOpen, setIsOpen] = useState(false);\n\n  // Debounced search to avoid too many API calls\n  const debouncedSearch = useCallback(\n    debounce((query: string) => {\n      onSearch(query);\n    }, 300),\n    [onSearch]\n  );\n\n  useEffect(() => {\n    debouncedSearch(searchQuery);\n  }, [searchQuery, debouncedSearch]);\n\n  useEffect(() => {\n    onFilter(filters);\n  }, [filters, onFilter]);\n\n  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchQuery(e.target.value);\n  };\n\n  const handleFilterChange = (groupId: string, value: any, type: string) => {\n    setFilters(prev => {\n      const newFilters = { ...prev };\n      \n      if (type === 'checkbox') {\n        if (!newFilters[groupId]) {\n          newFilters[groupId] = [];\n        }\n        \n        const currentValues = newFilters[groupId] as string[];\n        const index = currentValues.indexOf(value);\n        \n        if (index > -1) {\n          newFilters[groupId] = currentValues.filter((_, i) => i !== index);\n        } else {\n          newFilters[groupId] = [...currentValues, value];\n        }\n        \n        // Remove empty arrays\n        if (newFilters[groupId].length === 0) {\n          delete newFilters[groupId];\n        }\n      } else {\n        if (value === null || value === undefined || value === '') {\n          delete newFilters[groupId];\n        } else {\n          newFilters[groupId] = value;\n        }\n      }\n      \n      return newFilters;\n    });\n  };\n\n  const toggleGroup = (groupId: string) => {\n    setExpandedGroups(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(groupId)) {\n        newSet.delete(groupId);\n      } else {\n        newSet.add(groupId);\n      }\n      return newSet;\n    });\n  };\n\n  const clearAllFilters = () => {\n    setFilters({});\n    setSearchQuery('');\n  };\n\n  const getActiveFilterCount = () => {\n    let count = 0;\n    Object.values(filters).forEach(value => {\n      if (Array.isArray(value)) {\n        count += value.length;\n      } else if (value !== null && value !== undefined && value !== '') {\n        count += 1;\n      }\n    });\n    return count;\n  };\n\n  const renderFilterGroup = (group: FilterGroup) => {\n    const isExpanded = expandedGroups.has(group.id);\n    \n    return (\n      <div key={group.id} className=\"border-b border-gray-200 py-4\">\n        <button\n          onClick={() => toggleGroup(group.id)}\n          className=\"flex w-full items-center justify-between text-right\"\n        >\n          <span className=\"font-medium text-gray-900\">{group.label}</span>\n          {isExpanded ? (\n            <ChevronUp className=\"h-4 w-4\" />\n          ) : (\n            <ChevronDown className=\"h-4 w-4\" />\n          )}\n        </button>\n        \n        {isExpanded && (\n          <div className=\"mt-3 space-y-2\">\n            {group.type === 'checkbox' && group.options && (\n              <div className=\"space-y-2\">\n                {group.options.map(option => (\n                  <label key={option.id} className=\"flex items-center\">\n                    <input\n                      type=\"checkbox\"\n                      checked={(filters[group.id] || []).includes(option.id)}\n                      onChange={(e) => handleFilterChange(group.id, option.id, 'checkbox')}\n                      className=\"h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                    />\n                    <span className=\"mr-2 text-sm text-gray-700\">\n                      {option.label}\n                      {option.count && (\n                        <span className=\"mr-1 text-gray-500\">({option.count})</span>\n                      )}\n                    </span>\n                  </label>\n                ))}\n              </div>\n            )}\n            \n            {group.type === 'radio' && group.options && (\n              <div className=\"space-y-2\">\n                {group.options.map(option => (\n                  <label key={option.id} className=\"flex items-center\">\n                    <input\n                      type=\"radio\"\n                      name={group.id}\n                      checked={filters[group.id] === option.id}\n                      onChange={() => handleFilterChange(group.id, option.id, 'radio')}\n                      className=\"h-4 w-4 border-gray-300 text-blue-600 focus:ring-blue-500\"\n                    />\n                    <span className=\"mr-2 text-sm text-gray-700\">\n                      {option.label}\n                      {option.count && (\n                        <span className=\"mr-1 text-gray-500\">({option.count})</span>\n                      )}\n                    </span>\n                  </label>\n                ))}\n              </div>\n            )}\n            \n            {group.type === 'range' && (\n              <div className=\"space-y-2\">\n                <input\n                  type=\"range\"\n                  min={group.min}\n                  max={group.max}\n                  step={group.step || 1}\n                  value={filters[group.id] || group.min}\n                  onChange={(e) => handleFilterChange(group.id, Number(e.target.value), 'range')}\n                  className=\"w-full\"\n                />\n                <div className=\"flex justify-between text-sm text-gray-600\">\n                  <span>{group.min}</span>\n                  <span>{filters[group.id] || group.min}</span>\n                  <span>{group.max}</span>\n                </div>\n              </div>\n            )}\n            \n            {group.type === 'select' && group.options && (\n              <select\n                value={filters[group.id] || ''}\n                onChange={(e) => handleFilterChange(group.id, e.target.value, 'select')}\n                className=\"w-full rounded-md border border-gray-300 px-3 py-2 text-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500\"\n              >\n                <option value=\"\">همه {group.label}</option>\n                {group.options.map(option => (\n                  <option key={option.id} value={option.id}>\n                    {option.label}\n                    {option.count && ` (${option.count})`}\n                  </option>\n                ))}\n              </select>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <div className={className} dir=\"rtl\">\n      {/* Search Bar */}\n      <div className=\"relative mb-4\">\n        <Search className=\"absolute right-3 top-1/2 h-4 w-4 -translate-y-1/2 text-gray-400\" />\n        <input\n          type=\"text\"\n          placeholder=\"جستجو محصولات...\"\n          value={searchQuery}\n          onChange={handleSearchChange}\n          className=\"w-full rounded-md border border-gray-300 pr-10 pl-4 py-2 text-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500 text-right\"\n        />\n      </div>\n\n      {/* Mobile Filter Toggle */}\n      <div className=\"mb-4 flex items-center justify-between lg:hidden\">\n        <button\n          onClick={() => setIsOpen(!isOpen)}\n          className=\"flex items-center space-x-2 space-x-reverse rounded-md border border-gray-300 px-3 py-2 text-sm\"\n        >\n          <Filter className=\"h-4 w-4\" />\n          <span>فیلترها</span>\n          {getActiveFilterCount() > 0 && (\n            <span className=\"rounded-full bg-blue-600 px-2 py-0.5 text-xs text-white\">\n              {getActiveFilterCount()}\n            </span>\n          )}\n        </button>\n        \n        {getActiveFilterCount() > 0 && (\n          <button\n            onClick={clearAllFilters}\n            className=\"text-sm text-blue-600 hover:text-blue-800\"\n          >\n            پاک کردن همه\n          </button>\n        )}\n      </div>\n\n      {/* Filters */}\n      <div className={`space-y-0 ${isOpen ? 'block' : 'hidden'} lg:block`}>\n        {/* Active Filters */}\n        {getActiveFilterCount() > 0 && (\n          <div className=\"mb-4 rounded-md bg-gray-50 p-3\">\n            <div className=\"mb-2 flex items-center justify-between\">\n              <span className=\"text-sm font-medium\">فیلترهای فعال</span>\n              <button\n                onClick={clearAllFilters}\n                className=\"text-sm text-blue-600 hover:text-blue-800\"\n              >\n                پاک کردن همه\n              </button>\n            </div>\n            <div className=\"flex flex-wrap gap-2\">\n              {Object.entries(filters).map(([groupId, value]) => {\n                const group = filterGroups.find(g => g.id === groupId);\n                if (!group) return null;\n                \n                if (Array.isArray(value)) {\n                  return value.map(v => {\n                    const option = group.options?.find(o => o.id === v);\n                    return (\n                      <span\n                        key={`${groupId}-${v}`}\n                        className=\"inline-flex items-center rounded-full bg-blue-100 px-2 py-1 text-xs text-blue-800\"\n                      >\n                        {option?.label || v}\n                        <button\n                          onClick={() => handleFilterChange(groupId, v, 'checkbox')}\n                          className=\"mr-1 hover:text-blue-600\"\n                        >\n                          <X className=\"h-3 w-3\" />\n                        </button>\n                      </span>\n                    );\n                  });\n                } else {\n                  const option = group.options?.find(o => o.id === value);\n                  return (\n                    <span\n                      key={groupId}\n                      className=\"inline-flex items-center rounded-full bg-blue-100 px-2 py-1 text-xs text-blue-800\"\n                    >\n                      {option?.label || value}\n                      <button\n                        onClick={() => handleFilterChange(groupId, null, group.type)}\n                        className=\"mr-1 hover:text-blue-600\"\n                      >\n                        <X className=\"h-3 w-3\" />\n                      </button>\n                    </span>\n                  );\n                }\n              })}\n            </div>\n          </div>\n        )}\n\n        {/* Filter Groups */}\n        <div className=\"divide-y divide-gray-200\">\n          {filterGroups.map(renderFilterGroup)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProductFilters;"